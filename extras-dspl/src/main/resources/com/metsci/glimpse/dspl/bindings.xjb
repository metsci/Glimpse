<jxb:bindings version="1.0" 
  xmlns:jxb="http://java.sun.com/xml/ns/jaxb" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
  xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
  jxb:extensionBindingPrefixes="ci">
    <jxb:bindings schemaLocation="dspl.xsd" node="/xs:schema">

        <jxb:schemaBindings>
            <jxb:package name="com.metsci.glimpse.support.dspl.schema"/>
        </jxb:schemaBindings>

        <jxb:bindings node="//xs:element[@name='dspl']">
            <jxb:class name="DataSet"/>
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected java.io.File file;
    
    public java.io.File getFile( )
    {
    	return file;
    }
    
    public void setFile( java.io.File file )
    {
    	this.file = file;
    }
    
    @javax.xml.bind.annotation.XmlTransient
    protected com.metsci.glimpse.support.dspl.DsplParser parser;
    
    public com.metsci.glimpse.support.dspl.DsplParser getParser( )
    {
    	return parser;
    }
    
    public void setParser( com.metsci.glimpse.support.dspl.DsplParser parser )
    {
    	this.parser = parser;
    }
    
    public Concept getConcept( String namespace, String local ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return com.metsci.glimpse.support.dspl.util.DsplHelper.getConcept( this, namespace, local );
    }
    
    public Concept getConcept( String localId ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return getConcept( null, localId );
    }
    
    public Concept getConcept( javax.xml.namespace.QName ref ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	if ( ref == null ) return null;
    	return getConcept( ref.getNamespaceURI( ), ref.getLocalPart( ) );
    }
    
    public DataSet getDataSet( Import imp ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return getDataSet( imp.getNamespace( ), imp.getLocation( ) );
    }
    
    protected DataSet getDataSet( String namespace, String location ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return parser.loadDataset( this, namespace, location );
    }
]]>
            </ci:code>
        </jxb:bindings>

        <jxb:bindings node="//xs:complexType[@name='Info']">
            <ci:code>
<![CDATA[
	public String getNameEnglish( )
	{
		Values values = getName( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
	
	public String getDescriptionEnglish( )
	{
		Values values = getDescription( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
	
	public String getUrlEnglish( )
	{
		Values values = getUrl( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
]]>
            </ci:code>
        </jxb:bindings>

        <jxb:bindings node="//xs:complexType[@name='Values']">
            <ci:code>
<![CDATA[
	public String getValueEnglish( )
	{
		return com.metsci.glimpse.support.dspl.util.DsplHelper.getValueEnglish( getValue( ) );
	}
]]>
            </ci:code>
        </jxb:bindings>

        <jxb:bindings node="//xs:complexType[@name='ConceptInfo']">
            <ci:code>
<![CDATA[ 
    public String getPluralNameEnglish( )
	{
		Values values = getPluralName( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
	
	public String getTotalNameEnglish( )
	{
		Values values = getTotalName( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
	
	public String getSingularNonCapitalizedNameEnglish( )
	{
		Values values = getSingularNonCapitalizedName( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
	
	public String getPluralNonCapitalizedNameEnglish( )
	{
		Values values = getPluralNonCapitalizedName( );
		if ( values == null ) return null;
		
		return values.getValueEnglish( );
	}
]]>
            </ci:code>
        </jxb:bindings>
        
        <jxb:bindings node="//xs:complexType[@name='Concept']">
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected com.metsci.glimpse.support.dspl.parser.table.PropertyTableData tableData;

    @javax.xml.bind.annotation.XmlTransient
    protected DataSet parentDataset;
    
    public DataSet getDataSet( )
    {
    	return parentDataset;
    }
    
    public void setDataSet( DataSet dataSet )
    {
    	this.parentDataset = dataSet;
    }
    
    @javax.xml.bind.annotation.XmlTransient
    protected Concept parentConcept;

    public Concept getParentConcept( )
    {
    	return parentConcept;
    }
    
    public void setParentConcept( Concept parent )
    {
    	this.parentConcept = parent;
    }
    
    public String getNameEnglish( )
    {
    	if ( info != null )
    	{
    		String englishName = info.getNameEnglish( );
    		
    		if ( englishName != null )
    			return englishName;
    	}
    	
    	// if no name is provided use the id
    	return id;
    }

    public Table getTable( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return com.metsci.glimpse.support.dspl.util.DsplHelper.getTable( this );
    }
    
    public com.metsci.glimpse.support.dspl.parser.table.PropertyTableData getTableData( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	if ( tableData != null )
    		return tableData;
    	
    	tableData = com.metsci.glimpse.support.dspl.util.DsplHelper.getTableData( this );
    	
    	return tableData;
    }
    
    public boolean isInstanceOf( Concept superConcept )
    {
    	return com.metsci.glimpse.support.dspl.util.DsplHelper.isInstanceOf( this, superConcept );
    }
    
    public ConceptProperty getProperty( String ref )
    {
    	if ( ref == null )
    		return null;
    	
    	for( ConceptProperty property : getProperty( ) )
    	{
    		if ( ref.equals( property.getId( ) ) )
    		{
    			return property;
    		}
    	}
    	
    	return null;
    }
    
    public Attribute getAttribute( String ref )
    {
    	if ( ref == null )
    		return null;
    	
    	for( Attribute attribute : getAttribute( ) )
    	{
    		if ( ref.equals( attribute.getId( ) ) )
    		{
    			return attribute;
    		}
    	}
    	
    	return null;
    }
    
    @Override
    public boolean equals( Object o )
    {
    	if ( o == null ) return false;
    	if ( o == this ) return true;
    	if ( o instanceof Concept )
    	{
    		Concept c = (Concept) o;
    		return com.metsci.glimpse.support.dspl.util.DsplHelper.equals( this, c );
    	}
    	return false;
    }
]]>
	        </ci:code>
	    </jxb:bindings>   
	   
	    <jxb:bindings node="//xs:complexType[@name='Table']">
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected DataSet dataset;
    
    public DataSet getDataSet( )
    {
    	return dataset;
    }
    
    public void setDataSet( DataSet dataSet )
    {
    	this.dataset = dataSet;
    }
]]>
	        </ci:code>
	    </jxb:bindings>   
	   
	    <jxb:bindings node="//xs:complexType[@name='Slice']">
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected DataSet parentDataset;
    
    @javax.xml.bind.annotation.XmlTransient
    protected com.metsci.glimpse.support.dspl.parser.table.SliceTableData tableData;
    
    public DataSet getDataSet( )
    {
    	return parentDataset;
    }
    
    public void setDataSet( DataSet dataSet )
    {
    	this.parentDataset = dataSet;
    }
    
    public Table getTable( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	return com.metsci.glimpse.support.dspl.util.DsplHelper.getTable( this );
    }
    
    public com.metsci.glimpse.support.dspl.parser.table.SliceTableData getTableData( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	if ( tableData != null )
    		return tableData;
    	
    	tableData = com.metsci.glimpse.support.dspl.util.DsplHelper.getTableData( this );
    	
    	return tableData;
    }
    
    public Concept getCompatibleDimension( Concept superConcept ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
		return com.metsci.glimpse.support.dspl.util.DsplHelper.getCompatibleConceptRef( this, superConcept, getDimension( ) );
    }
    
    public Concept getCompatibleMetric( Concept superConcept ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
		return com.metsci.glimpse.support.dspl.util.DsplHelper.getCompatibleConceptRef( this, superConcept, getMetric( ) );
    }
]]>
	        </ci:code>
	    </jxb:bindings>
	    
	   	<jxb:bindings node="//xs:complexType[@name='SliceConceptRef']">
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected Slice slice;
    
    public Slice getSlice( )
    {
    	return slice;
    }
    
    public void setSlice( Slice slice )
    {
    	this.slice = slice;
    }
    
    public Concept getConcept( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	DataSet dataset = this.slice.getDataSet( );
    	return dataset.getConcept( this.conceptRef );
    }
]]>
	        </ci:code>
	    </jxb:bindings>
	    
	   	<jxb:bindings node="//xs:complexType[@name='ConceptProperty']">
            <ci:code>
<![CDATA[
	@javax.xml.bind.annotation.XmlTransient
    protected Concept parentConcept;
    
    public Concept getParentConcept( )
    {
    	return parentConcept;
    }
    
    public void setParentConcept( Concept parentConcept )
    {
    	this.parentConcept = parentConcept;
    }
    
    public Concept getConcept( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	DataSet dataset = this.parentConcept.getDataSet( );
    	return dataset.getConcept( this.conceptRef );
    }
]]>
	        </ci:code>
	    </jxb:bindings>

	   	<jxb:bindings node="//xs:complexType[@name='Attribute']">
            <ci:code>
<![CDATA[
    @javax.xml.bind.annotation.XmlTransient
    protected Concept parentConcept;
    
    public static class AttributeProperties
    {
        protected int index;
        protected com.metsci.glimpse.support.dspl.parser.table.PropertyTableData table;

        public AttributeProperties( Attribute attribute ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
        {
            this( attribute.getPropertyIndex( ), attribute.getConcept( ).getTableData( ) );
        }
        
        public AttributeProperties( int index, com.metsci.glimpse.support.dspl.parser.table.PropertyTableData table )
        {
            this.index = index;
            this.table = table;
        }
        
        public com.metsci.glimpse.support.dspl.parser.table.PropertyTableData getPropertyTableData( )
        {
            return this.table;
        }
        
        public int getIndex( )
        {
            return this.index;
        }

        public String getStringData( String ref )
        {
            return this.table.getColumn( ref ).getStringData( this.index );
        }

        public int getIntegerData( String ref )
        {
            return this.table.getColumn( ref ).getIntegerData( this.index );
        }

        public float getFloatData( String ref )
        {
            return this.table.getColumn( ref ).getFloatData( this.index );
        }

        public boolean getBooleanData( String ref )
        {
            return this.table.getColumn( ref ).getBooleanData( this.index );
        }

        public long getDateData( String ref )
        {
            return this.table.getColumn( ref ).getDateData( this.index );
        }

        public String getStringData( Concept ref )
        {
            return this.table.getColumn( ref ).getStringData( this.index );
        }

        public int getIntegerData( Concept ref )
        {
            return this.table.getColumn( ref ).getIntegerData( this.index );
        }

        public float getFloatData( Concept ref )
        {
            return this.table.getColumn( ref ).getFloatData( this.index );
        }

        public boolean getBooleanData( Concept ref )
        {
            return this.table.getColumn( ref ).getBooleanData( this.index );
        }

        public long getDateData( Concept ref )
        {
            return this.table.getColumn( ref ).getDateData( this.index );
        }
    }
    
    public AttributeProperties getAttributeProperties( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
        return new AttributeProperties( this );
    }

    protected int getPropertyIndex( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
        if ( getType( ).getRef( ) != DataType.CONCEPT )
        {
            throw new com.metsci.glimpse.support.dspl.util.DsplException( "Cannot retrieve TableColumn index for non-Concept Attribute." );
        }

        String value = getValueEnglish( );
        Concept concept = getConcept( );
        com.metsci.glimpse.support.dspl.parser.table.PropertyTableData tableData = concept.getTableData( );
        com.metsci.glimpse.support.dspl.parser.column.TableColumn keyColumn = tableData.getColumn( concept );

        int size = keyColumn.getSize( );

        for ( int i = 0; i < size; i++ )
        {
            String row = keyColumn.getStringData( i );

            if ( value.equals( row ) ) return i;
        }

        throw new com.metsci.glimpse.support.dspl.util.DsplException( "Concept %s does not have key %s in its property data table.", concept.getNameEnglish( ), value );
    }
    
    public Concept getParentConcept( )
    {
    	return parentConcept;
    }
    
    public void setParentConcept( Concept parentConcept )
    {
    	this.parentConcept = parentConcept;
    }
    
    public Concept getConcept( ) throws javax.xml.bind.JAXBException, java.io.IOException, com.metsci.glimpse.support.dspl.util.DsplException
    {
    	DataSet dataset = this.parentConcept.getDataSet( );
    	return dataset.getConcept( this.conceptRef );
    }
    
	public String getNameEnglish( )
    {
    	if ( info != null )
    	{
    		String englishName = info.getNameEnglish( );
    		
    		if ( englishName != null )
    			return englishName;
    	}
    	
    	// if no name is provided use the id
    	return id;
    }
	
	public String getValueEnglish( )
	{
		return com.metsci.glimpse.support.dspl.util.DsplHelper.getValueEnglish( getValue( ) );
	}
]]>
	        </ci:code>
	    </jxb:bindings>
	    
		<jxb:bindings node="//xs:complexType[@name='Concept']//xs:choice/xs:element[@name='table']">
	    	<jxb:property name="tableMapping"/>
	    </jxb:bindings>
	    
	    <jxb:bindings node="//xs:complexType[@name='Slice']//xs:choice/xs:element[@name='table']">
	    	<jxb:property name="tableMapping"/>
	    </jxb:bindings>
	    
	   	<jxb:bindings node="//xs:complexType[@name='SliceConceptRef']/xs:attribute[@name='concept']">
	    	<jxb:property name="conceptRef"/>
	    </jxb:bindings>
	    
	   	<jxb:bindings node="//xs:complexType[@name='ConceptProperty']/xs:attribute[@name='concept']">
	    	<jxb:property name="conceptRef"/>
	    </jxb:bindings>
	    
	    <jxb:bindings node="//xs:complexType[@name='Attribute']/xs:attribute[@name='concept']">
	    	<jxb:property name="conceptRef"/>
	    </jxb:bindings>
	    
    </jxb:bindings>
</jxb:bindings>